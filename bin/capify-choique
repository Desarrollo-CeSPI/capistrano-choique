#!/usr/bin/env ruby

require 'capistrano'
require 'optparse'
require 'fileutils'

capistrano_choique_version = Capistrano::Choique::VERSION

OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename($0)} [path]"

  opts.on("-h", "--help", "Displays this help info") do
    puts opts
    exit 0
  end

  opts.on("-v", "--version", "") do
    puts "capistrano-choique v#{Capistrano::Choique::VERSION}"
    exit 0
  end

  begin
    opts.parse!(ARGV)
  rescue OptionParser::ParseError => e
    warn e.message
    puts opts
    exit 1
  end
end

if ARGV.empty?
  abort "Please specify the directory to capify, e.g. `#{File.basename($0)} .'"
elsif !File.exists?(ARGV.first)
  abort "`#{ARGV.first}' does not exist."
elsif !File.directory?(ARGV.first)
  abort "`#{ARGV.first}' is not a directory."
elsif ARGV.length > 1
  abort "Too many arguments; please specify only the directory to capify."
end

def unindent(string)
  indentation = string[/\A\s*/]
  string.strip.gsub(/^#{indentation}/, "")
end

base = ARGV.shift

files = {
  "Capfile" => unindent(<<-FILE),
    load 'deploy' 

    require 'capistrano-choique'
    load 'config/deploy'
  FILE

  "config/deploy.rb" => unindent(<<-FILE)
    set :application, "set your application name here"

    # Database settings
    #set :user, "ssh user used for deployment"
    #set :db_type, "mysql"
    #set :db_host, "localhost"
    #set :db_port, "3306"
    #set :db_name, "Set database name. Defaults to \#{application}"
    #set :db_user, "Set database user to connect. Defaults to \#{application}"
    set :db_password, "Change database password"

    # Deploy settings
    set :domain,      "\#{application}.unlp.edu.ar"
    set :deploy_to,   "/opt/applications/\#{application}"

    role :web,        domain                         # Your HTTP server, Apache/etc
    role :app,        domain                         # This may be the same as your `Web` server
    role :db,         domain, :primary => true       # This is where Symfony2 migrations will run

    set  :keep_releases,  3

    # Be more verbose by uncommenting the following line
    # logger.level = Logger::MAX_LEVEL
    set :use_sudo,  false


    # Choique settings
    #set :choique_name, application
    #set :choique_backend_port, 8000
    #set :choique_frontend_url, "http://\#{domain}/"
    #set :choique_backend_url, "https://\#{domain}:\#{choique_backend_port}/"
    #set :choique_testing, false
  FILE
}

files.each do |file, content|
  file = File.join(base, file)
  if File.exists?(file)
    warn "[skip] '#{file}' already exists"
  elsif File.exists?(file.downcase)
    warn "[skip] '#{file.downcase}' exists, which could conflict with `#{file}'"
  else
    unless File.exists?(File.dirname(file))
      puts "[add] making directory '#{File.dirname(file)}'"
      FileUtils.mkdir_p(File.dirname(file))
    end
    puts "[add] writing '#{file}'"
    File.open(file, "w") { |f| f.write(content) }
  end
end

puts "[done] choique project capified!"
